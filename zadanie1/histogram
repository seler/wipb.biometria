#!/usr/bin/env python
import os
from PIL import Image, ImageDraw
import itertools


def get_histogram(infile):
    img = Image.open(infile)
    im = img.load()

    width, height = img.size

    histogram = {}
    for i, c in enumerate(img.mode):
        histogram[c] = [0] * 256

    if img.mode == 'L':
        def test(h, x):
            h['L'][x] += 1
    else:
        def test(h, x):
            for i, c in enumerate(img.mode):
                h[c][x[i]] += 1

    for i in range(width):
        for j in range(height):
            test(histogram, im[i, j])

    max_value = width * height

    return histogram, max_value


def main(infile, outfile):

    histogram, max_value = get_histogram(infile)

    max_value = max(list(itertools.chain(*histogram.values())))

    height, width = 256, 256
    path, ext = os.path.splitext(outfile)

    for color, values in histogram.items():
        im = Image.new('1', (height, width), 1)
        draw = ImageDraw.Draw(im)

        for i, value in enumerate(values):
            if value:
                length = value * height / max_value
                draw.line((i, height - length, i, height))

        im.save("{0}-{1}{2}".format(path, color, ext))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('infile', type=str, nargs=1)
    parser.add_argument('outfile', type=str, nargs=1)
    args = parser.parse_args()

    main(args.infile[0], args.outfile[0])
